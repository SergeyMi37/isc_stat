<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="stat.cspAccessLog">
<Description>
class to view csp server requests using SQL</Description>
<Super>%Persistent</Super>
<TimeCreated>65700,55458.823776</TimeCreated>

<Property name="jid">
<Description>
storage slot 2</Description>
<Type>%String</Type>
</Property>

<Property name="pid">
<Description>
storage slot 3</Description>
<Type>%String</Type>
</Property>

<Property name="ReqId">
<Description>
csp server request id, generated by stat.csp</Description>
<Type>%String</Type>
</Property>

<Property name="gwReqId">
<Description>
cspgw request id originally in hex, storage slot 9</Description>
<Type>%String</Type>
</Property>

<Property name="duration">
<Description>
time spent to process http request, storage slot 10</Description>
<Type>%Double</Type>
</Property>

<Property name="tsStart">
<Description>
time start of http processing, storage slot 11</Description>
<Type>%String</Type>
</Property>

<Property name="tsEnd">
<Description>
time end of http processing, storage slot 12</Description>
<Type>%String</Type>
</Property>

<Property name="url">
<Description>
storage slot 13</Description>
<Type>%String</Type>
</Property>

<Property name="method">
<Description>
storage slot 14</Description>
<Type>%String</Type>
</Property>

<Property name="NS">
<Description>
namespace slot 15</Description>
<Type>%String</Type>
</Property>

<Property name="class">
<Description>
storage slot 16</Description>
<Type>%String</Type>
</Property>

<Property name="cspapp">
<Description>
storage slot 17</Description>
<Type>%String</Type>
</Property>

<Property name="cliip">
<Description>
WebClient ip, storage slot 18</Description>
<Type>%String</Type>
</Property>

<Property name="cliport">
<Description>
WebCLietn port, storage slot 19</Description>
<Type>%String</Type>
</Property>

<Property name="gwhost">
<Description>
host of cspgw and webserver host/ip, storage slot 20</Description>
<Type>%String</Type>
</Property>

<Property name="gwport">
<Description>
port of cspgw and webserver, storage slot 21</Description>
<Type>%String</Type>
</Property>

<Property name="SessionId">
<Description>
csp session id, storage slot 4</Description>
<Type>%String</Type>
</Property>

<Property name="SessionStart">
<Description>
session start flag, storage slot 5</Description>
<Type>%Boolean</Type>
</Property>

<Property name="SessionEnd">
<Description>
session end flag, storage slot 6</Description>
<Type>%Boolean</Type>
</Property>

<Property name="inSessionId">
<Description>
incoming session id(in coockie or CSPCHD request argument),storage slot 7</Description>
<Type>%String</Type>
</Property>

<Property name="LicenseId">
<Description>
license id of the session, storage slot 8</Description>
<Type>%String</Type>
</Property>

<Property name="tokens">
<Description>
number of COS ?tokens/lines? executed, storage slot 22</Description>
<Type>%BigInt</Type>
</Property>

<Property name="GloRef">
<Description>
global accessed during request execution, storage slot 23</Description>
<Type>%BigInt</Type>
</Property>

<Property name="GloUpd">
<Description>
globals updates during request execution, storage slot 24</Description>
<Type>%BigInt</Type>
</Property>

<Property name="PhyRd">
<Description>
physical read during request execution, storage slot 25</Description>
<Type>%BigInt</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property broker As stat.cspAccessLogBroker;

]]></Content>
</UDLText>

<Property name="BrkClass">
<Type>%String</Type>
</Property>

<Property name="BrkMethod">
<Type>%String</Type>
</Property>

<Property name="BrkNArgs">
<Type>%Integer</Type>
</Property>

<Property name="BrkArgs">
<Description>
Use vBrkArgs in sql since BrksArgs is Cache List and it is binary</Description>
<Type>%String</Type>
</Property>

<Property name="vBrkArgs">
<Description><![CDATA[
represent argument as quoted string in comma list<br/>
don't expect it is correct since it is correct as correct zw<br/>
anyway it is mainly to view string data<br/>
binary might be displayed incorrectly<br/>]]></Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>
    set v={BrkArgs} set n={BrkNArgs}
    set x="" for i=1:1:n { set x=x_$case(x="",1:"",:",")_$$Format^%qcr($LG(v,i),1) }
    set {*}=x
  </SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="cpurun">
<Description>
time to run</Description>
<Type>%Double</Type>
</Property>

<Property name="cpurunqueue">
<Description>
time to wait in runqueue</Description>
<Type>%Double</Type>
</Property>

<Property name="cputimeslices">
<Description>
number of timeslices for process</Description>
<Type>%Integer</Type>
</Property>

<Index name="id">
<IdKey>1</IdKey>
<Properties>ReqId</Properties>
<Unique>1</Unique>
</Index>

<Method name="LoadFromCSPServerLog">
<Description><![CDATA[
load csp.log fron file into cache<br/>
in order to have SQL processing<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>file</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 open file:("RS"):0.1 if $test=0 quit -1
 set oldeof=$SYSTEM.Process.SetZEOF(1)
 use file
 read hdr1
 read hdr2
 for {
   read tx quit:$zeof=-1
   set ts=$P(tx,",",1)
   set reqid=$P(tx,",",2)
   set state=$P(tx,",",3)
   if state="s" {
     set sessionid=$P(tx,",",4)
     set gwReqId=$P(tx,",",5)
     set jid=$P(tx,",",6)
     set pid=$P(tx,",",7)
     set url=$P(tx,",",8)
     set ns=$P(tx,",",9)
     set class=$P(tx,",",10)
     set cspapp=$P(tx,",",11)
     set method=$P(tx,",",12)
     set cliip=$P(tx,",",13)
     set cliport=$P(tx,",",14)
     set gwhost=$P(tx,",",15)
     set gwport=$P(tx,",",16)
     set data=$LB(,jid,pid,,,,sessionid/*7inSessionId*/,,gwReqId/*9*/,,ts/*11*/,,url/*13*/,method/*14*/,ns,class,cspapp,cliip,cliport,gwhost,gwport)
     set ^|"SYSSTAT"|stat.csp(reqid)=data
   }
   elseif state="e" {
     set ts=$P(tx,",",1)
     set reqid=$P(tx,",",2)
     set data=$G(^|"SYSSTAT"|stat.csp(reqid))
     set sessionid=$P(tx,",",4)/*sessionid*/
     set $LI(data,4)=sessionid
     set $LI(data,5)=$P(tx,",",6)/*session start*/
     set $LI(data,6)=$P(tx,",",7)/*session end*/
     set $LI(data,8)=$P(tx,",",5)/*license id*/
     set $LI(data,10)=$P(tx,",",8)/*duration*/
     set $LI(data,12)=ts/*tsEnd*/
     set $LI(data,22)=$P(tx,",",9)/*tokens*/
     set $LI(data,23)=$P(tx,",",10)/*GloRef*/
     set $LI(data,24)=$P(tx,",",11)/*GloUpd*/
     set $LI(data,25)=$P(tx,",",12)/*PhyRd*/
     set $LI(data,26)=$P(tx,",",13)/*cpurun*/
     set $LI(data,27)=$P(tx,",",14)/*cpurunqueue*/
     set $LI(data,28)=$P(tx,",",15)/*cputimeslices*/
     set $LI(data,29)=$P(tx,",",16)/*broker class*/
     set $LI(data,30)=$P(tx,",",17)/*broker method*/
     set $LI(data,31)=$P(tx,",",18)/*broker argument number*/
     if reqid'="" && $D(BrokerArgs(reqid)) set $LI(data,32)=BrokerArgs(reqid) kill BrokerArgs(reqid)
     set ^|"SYSSTAT"|stat.csp(reqid)=data
   }
   elseif state="ba" {
     set o=$F(tx,",ba,")
     set BrokerArgs=$SYSTEM.Encryption.Base64Decode($E(tx,o,*))
     set tx1=$E(tx,1,o-2)
     set reqid=$P(tx1,",",2)
     if reqid'="" set BrokerArgs(reqid)=$G(BrokerArgs)
   }
 }
 use 0 close file
 quit 1
]]></Implementation>
</Method>

<Method name="ExportToCSPServerLog">
<Description>
does't support export broker details(class,method,args) yet</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 open file:("RS"):0.1 if $test=0 quit -1
 set oldeof=$SYSTEM.Process.SetZEOF(1)
 use file
 W ##class(stat.csp).hdr1(),!
 W ##class(stat.csp).hdr2(),!
 set id="" for {
   set id=$order(^|"SYSSTAT"|stat.csp(id),1,data) quit:id=""
   set tx1=$LG(data,11)_","_id_",s,"_$LG(data,7)_","_$LG(data,9)_","_$LG(data,2)_","_$LG(data,3)_","_$LG(data,13)_","_$LG(data,15)_","_$LG(data,16)/*class*/_
   ","_$LG(data,14)/*method*/_","_$LG(data,18)/*cliip*/_","_$LG(data,19)/*cliport*/_$LG(data,20)/*gwhost*/_","_$LG(data,21)/*gwport*/
   set tx2=$LG(data,12)_","_id_",e,"_$LG(data,4)_","_$LG(data,8)/*LicenseId*/_","_$LG(data,5)_","_$LG(data,6)_","_$LG(data,10)/*duration*/_","_$LG(data,22)/*tokens*/
    _","_$LG(data,23)/*GloRef*/_","_$LG(data,24)/*GloUpd*/_","_$LG(data,25)/*PhyRd*/_","_$LG(data,26)/*cpu*/_","_$LG(data,27)/*cpu*/_","_$LG(data,28)/*cpu*/
    _","_$LG(data,29)/*BrokerClass*/_","_$LG(data,30)/*BrokerMethod*/_","_$LG(data,31)/*BrokerNArgs*/
   if $LG(data,29)'="" { W tx1,! W ","_id_",ba,"_$SYSTEM.Encryption.Base64Encode($LG(data,32),1) W tx2,!}
   else { W tx1,!,tx2,! }
 }
 use 0 close file
 quit 1
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^|"SYSSTAT"|stat.csp</DataLocation>
<DefaultData>StatCSPAccessLog</DefaultData>
<IdLocation>^|"SYSSTAT"|stat.csp.id</IdLocation>
<IndexLocation>^|"SYSSTAT"|stat.csp.i</IndexLocation>
<StreamLocation>^|"SYSSTAT"|stat.csp.s</StreamLocation>
<Data name="StatCSPAccessLog">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>jid</Value>
</Value>
<Value name="3">
<Value>pid</Value>
</Value>
<Value name="4">
<Value>SessionId</Value>
</Value>
<Value name="5">
<Value>SessionStart</Value>
</Value>
<Value name="6">
<Value>SessionEnd</Value>
</Value>
<Value name="7">
<Value>inSessionId</Value>
</Value>
<Value name="8">
<Value>LicenseId</Value>
</Value>
<Value name="9">
<Value>gwReqId</Value>
</Value>
<Value name="10">
<Value>duration</Value>
</Value>
<Value name="11">
<Value>tsStart</Value>
</Value>
<Value name="12">
<Value>tsEnd</Value>
</Value>
<Value name="13">
<Value>url</Value>
</Value>
<Value name="14">
<Value>method</Value>
</Value>
<Value name="15">
<Value>NS</Value>
</Value>
<Value name="16">
<Value>class</Value>
</Value>
<Value name="17">
<Value>cspapp</Value>
</Value>
<Value name="18">
<Value>cliip</Value>
</Value>
<Value name="19">
<Value>cliport</Value>
</Value>
<Value name="20">
<Value>gwhost</Value>
</Value>
<Value name="21">
<Value>gwport</Value>
</Value>
<Value name="22">
<Value>tokens</Value>
</Value>
<Value name="23">
<Value>GloRef</Value>
</Value>
<Value name="24">
<Value>GloUpd</Value>
</Value>
<Value name="25">
<Value>PhyRd</Value>
</Value>
<Value name="26">
<Value>cpurun</Value>
</Value>
<Value name="27">
<Value>cpurunqueue</Value>
</Value>
<Value name="28">
<Value>cputimeslices</Value>
</Value>
<Value name="29">
<Value>BrkClass</Value>
</Value>
<Value name="30">
<Value>BrkMethod</Value>
</Value>
<Value name="31">
<Value>BrkNArgs</Value>
</Value>
<Value name="32">
<Value>BrkArgs</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
