ROUTINE stat.iostat.linux
#; iostat specific for linux
#; general unix vmstat customized for flawor of unix: linux,aix.
#include stat
log(delay="",count="",log="",statmon=0)
 $$$PROCMODTRAP
 set platformtype=$$platformtype^stat.lib
 set platform=$$platform^stat.lib
 if platformtype="unix" { do sumask^stat.lib("rw-rw-r--") }
 set io=$io set stop=0 set NL=$C(10) set expense=0
 
 if statmon=1 {
   merge %debug=^SYS("stat","debug")
   set daemon=$$DaemonName
   set DaemonLock=$$DaemonLock
   lock +@DaemonLock:0.1 if $test'=1 $$$ConLog(daemon_" can acquire daemon lock "_DaemonLock) goto runexit
   set DaemonSignal=$$DaemonSignal
   set retSignal=$SYSTEM.Event.Create(DaemonSignal)
   if retSignal'=1 {
     $$$ConLog(daemon_" terminated: failure to create daemon signal "_DaemonSignal)
     set reason="error craete daemon event"
     goto runexit
   }
#; register itself in CtlGlo process table
   do CtlGloSelfProcStart^stat.lib(daemon)
#; send signal to master it registers daemon in it proc("daemon") var
   do procstart^stat.monitor($$$SelfJid,$J,$$$SelfPteuc,daemon)
   set MasterSignal=$$DaemonEvent^stat.monitor
   set logdir=$$logdir^stat.lib
   set CtlGlo=$$CtlGlo^stat.lib
   if delay="" { set delay=$G(@CtlGlo@("interval"),1) }
   if log="" { set hinit=$h set log=$$log^stat.lib(logdir,$$logprefix,hinit,delay,.logcount) }
 }
 else {
   if log="" set log=$io set NL=$C(13,10)
 }
 set oldeof=$SYSTEM.Process.SetZEOF(1)
 do tsTransformInit
 if io'=log { open log:("NWS"):1 if $test=0 { $$$ConLog($ZNAME_" create file error "_log) goto runexit } }
 do cmdinit(delay,count) if stop=1 { goto runexit }
 do readhdr
 use log W statinfo,!
 set istat=0 set dt=0
 do loop
runexit
 use io
 if $G(cmddev)'="" try{close cmddev}catch{}
 if io'=log try {close log}catch{}
 if statmon=1 {
   do CtlGloSelfProcStop^stat.lib(daemon)
   do procstop^stat.monitor($$$SelfJid,$J,$$$SelfPteuc,daemon)
   set ret=$SYSTEM.Event.Delete(DaemonSignal)
   try { lock -@DaemonLock } catch {}
 }
 quit
DaemonError
 set $ztrap="" do $zu(9,"",$ZNAME_" exit $ZE="_$ZE) goto runexit
loop
 for {
   if statmon=1&&(istat>0) { set twait=delay-(2*dt) if twait<0 { set twait=0} set retSignal=$SYSTEM.Event.WaitMsg(DaemonSignal,twait)
     if $LG(retSignal,1)=1 { set msg=$LG(retSignal,2) do SignalHandler if stop=1 quit }
   }
   use cmddev
   set zh=$zh set logtx1="" set logtx2=""
   read txts if $zeof=-1 { set stop=1 quit } set ts=txts
   read txhdr if $zeof=-1 { set stop=1 quit}
   set ts=$xecute(codets,txts)
   set logtx1=ts
   for { 
     use cmddev read tx if $zeof=-1 { set stop=1 quit }
     if tx="" quit
     set tx2=$zstrip(tx,"<=>"," ","") set tx3=$TR(tx2," ",",")
     set n=$L(tx3,",") set tx4=$P(tx3,",",1) for i=2:1:n set v=+$P(tx3,",",i) set tx4=tx4_","_$case(v=0,1:"",:v)
     set logtx2=logtx2_","_tx4_ NL
   }
   set dt=$zh-zh
   use log W logtx1_$case(expense,1:","_dt,:"")_NL_logtx2
   set istat=istat+1
   if +$G(count)>0 && ( istat '< count) quit
   set dt=$zh-zh
 }
 quit
#; -p reports paritions on disk
cmdinit(delay,count)
 set cmddev="|CPIPE|"
 do NoShellNewProc^stat.lib(.isnoshell)
 if isnoshell=1 {
   set cmd="/usr/bin/iostat"
   kill args
   set args($I(args))="-tdxm"
   set args($I(args))=1
   set args($I(args))=1
   #;zw args
   open cmddev:(/COMMAND=cmd:/ARGS=args...):1
   if $test=0 set stop=1 quit
   use cmddev
 }
 else {
   set cmd="iostat -t "_1_" "_1
   open cmddev:(cmd:"Q"):1
   if $test=0 set stop=1 quit
   use cmddev
 }
#;Linux 5.5.16-100.fc30.x86_64 (nzasf)   2020-07-09  _x86_64_ (8 CPU)
#;
#;2020-07-09T13:40:52+0300
#; Device            r/s     w/s     rMB/s     wMB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util

 read tx1
 read tx2
 read tx3 // timestamp
 read tx4 // header
 set statinfo="ts,"_$TR($zstrip(tx4,"<=>"," ","")," ",",")
 for { read tx if tx="" { quit} if $zeof=-1 {quit} }
 close cmddev
 try {
   set ts=$xecute(codets,tx3)
 }
 catch e{
   #;B
   $$$ConLog($ZNAME_" error during time stamp transformation $ZE="_$ZE)
   set quit=1
 }
 if isnoshell=1 {
   set cmd="/usr/bin/iostat"
   kill args
   set args($I(args))="-tdxm"
   set args($I(args))=delay
   if +count>0 set args($I(args))=count
   #;zw args
   open cmddev:(/COMMAND=cmd:/ARGS=args...):1
   if $test=0 set stop=1 quit
   use cmddev
 }
 else {
   set cmd="iostat -t "_delay_$case(+count>0,1:" "_count,:"")
   open cmddev:(cmd:"Q"):1
   if $test=0 set stop=1 quit
   use cmddev
 }
 quit
readhdr
 use cmddev read hdr1 read hdr2 quit

DaemonSignal() public { quit "^"_$ZNAME }
DaemonLock() public { quit "^"_$ZNAME }
DaemonName() public { quit "iostat" }
logprefix() public { quit "stat_iostat" }

#; api start vmstat daemon
start() public { job log("","","",1) }
#; api stop vmstat daemon
stop(reason="user") public { set ret=$SYSTEM.Event.Signal($$DaemonSignal,$LB("terminate",reason)) quit ret }
switchlog() public { set ret=$SYSTEM.Event.Signal($$DaemonSignal,$LB("switchlog")) quit }
#; standalone usage outside stat monitor
display(delay,count,log="") do log(delay,count,log) quit

SignalHandler
 set cmd=$LG(msg,1)
 if cmd="terminate" { set stop=1 }
 elseif cmd="switchlog" {
   close log
   set h=$h set newlog=$$log^stat.lib(logdir,$$logprefix,h,delay,.logcount)
   open newlog:("NWS"):1
   if $test'=1 $$$ConLog($ZNAME_" exits, failure to create new open log file "_newlog) set stop=1 quit
   use newlog
   W statinfo,!
   set log=newlog set istat=0
 }
 quit

tsTransformInit
 kill a do posixlocalelctime^stat.lib(.a)
 set dfmt=a("d_fmt") set tfmt=a("t_fmt")
 kill codets
 do xecutecodets^stat.lib(dfmt,tfmt,.codets)
 kill a
 quit
